{"version":3,"sources":["generated/util.ts","generated/op/showTodos.ts","generated/op/forFilterBar.ts","generated/op/addTodoItem.ts","generated/op/updateTodoItem.ts","generated/op/removeTodoItem.ts","generated/op/clearCompletedItems.ts","generated/ql.ts","resolvers.ts","components/util.tsx","components/InputAddItem.tsx","components/FilterBar.tsx","components/TodoItem.tsx","components/TodoList.tsx","pages/Root.tsx","index.tsx"],"names":["TodoItemStatus","VisibilityFilter","showTodos","graphql","forFilterBar","addTodoItem","updateTodoItem","removeTodoItem","clearCompletedItems","useQuery","x","opt","useQueryOrig","useMutation","useMutationOrig","op","fragment","gql","idx","resolvers","Mutation","_","content","cache","prev","readQuery","query","ql","newItem","__typename","id","status","active","isLoading","data","todos","writeData","cacheId","getCacheKey","todo","readFragment","nextTodo","produce","filter","e","__","completedItems","completed","push","TodoItem","FlexR","styled","div","FlexC","InputBar","input","Form","form","IconSend","FontAwesomeIcon","attrs","icon","faPaperPlane","disabled","InputAddItem","onSubmit","placeholder","defaultValue","props","inputRef","useRef","useState","value","setValue","preventDefault","length","ref","onChange","target","onClick","Wrap","Button","button","SelectedButton","SegmentButton","choices","selectedChoice","onSelectChoice","map","choice","key","FilterBar","onClearCompleted","Icon","color","primary","hover","_Cont","Check","checked","onToggle","type","IconSync","faSpinner","IconRemove","faTimes","isSync","onChangeText","onRemove","v","onBlur","onKeyDown","blur","TodoListLoading","TodoListEmpty","TodoList","onChangeItemContent","onChangeItemStatus","onRemoveItem","Header","Card","CardItem","Cont","QxInputAddItem","variables","QxFilterBar","updateQuery","visibilityFilter","d","QxTodoList","InMemoryCache","all","client","ApolloClient","ReactDOM","render","ApolloProvider","Root","document","getElementById"],"mappings":"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","file":"static/js/main.311080cb.chunk.js","sourcesContent":["\n// ~ auto generated\nimport { DocumentNode } from \"graphql\";\n\n/* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum TodoItemStatus {\n  active = \"active\",\n  completed = \"completed\",\n}\n\nexport enum VisibilityFilter {\n  active = \"active\",\n  all = \"all\",\n  completed = \"completed\",\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n\n\nexport const todo = `fragment todo on TodoItem {\n  content\n  status\n  isLoading\n}`\n\n\nexport {gql as graphql} from '@apollo/client'\n\n\nexport interface ExtQuery<T,T2> extends DocumentNode {\n}\n\nexport interface ExtSubscription<T,T2> extends DocumentNode {\n}\n\nexport interface ExtMutation<T,T2> extends DocumentNode {\n  \n}\n\n","import {graphql,ExtQuery,TodoItemStatus,VisibilityFilter,todo} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: showTodos\n// ====================================================\n\nexport interface showTodos_todos {\n  id: string;\n  status: TodoItemStatus;\n  content: string;\n  isLoading: boolean;\n}\n\nexport interface showTodos {\n  visibilityFilter: VisibilityFilter;\n  todos: showTodos_todos[];\n}\n\nexport interface showTodosVariables {};\n\nexport const showTodos:ExtQuery<showTodos,showTodosVariables> = graphql`\n    query showTodos {\n  visibilityFilter @client\n  todos @client {\n    id\n    status\n    content\n    isLoading\n  }\n}\n    ${todo}\n`","import {graphql,ExtQuery,VisibilityFilter} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: forFilterBar\n// ====================================================\n\nexport interface forFilterBar {\n  visibilityFilter: VisibilityFilter;\n}\n\nexport interface forFilterBarVariables {};\n\nexport const forFilterBar:ExtQuery<forFilterBar,forFilterBarVariables> = graphql`\n    query forFilterBar {\n  visibilityFilter @client\n}\n    \n`","import {graphql,ExtMutation,} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: addTodoItem\n// ====================================================\n\nexport interface addTodoItem_addTodoItem {\n  id: string;\n}\n\nexport interface addTodoItem {\n  addTodoItem: addTodoItem_addTodoItem;\n}\n\nexport interface addTodoItemVariables {\n  content: string;\n}\n\nexport const addTodoItem:ExtMutation<addTodoItem,addTodoItemVariables> = graphql`\n    mutation addTodoItem($content: String!) {\n  addTodoItem(content: $content) @client {\n    id\n  }\n}\n    \n`","import {graphql,ExtMutation,TodoItemStatus} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: updateTodoItem\n// ====================================================\n\nexport interface updateTodoItem {\n  updateTodoItem: boolean;\n}\n\nexport interface updateTodoItemVariables {\n  id: string;\n  content?: string | null;\n  status?: TodoItemStatus | null;\n}\n\nexport const updateTodoItem:ExtMutation<updateTodoItem,updateTodoItemVariables> = graphql`\n    mutation updateTodoItem($id: ID!, $content: String, $status: TodoItemStatus) {\n  updateTodoItem(id: $id, content: $content, status: $status) @client\n}\n    \n`","import {graphql,ExtMutation,} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: removeTodoItem\n// ====================================================\n\nexport interface removeTodoItem_removeTodoItem {\n  id: string;\n}\n\nexport interface removeTodoItem {\n  removeTodoItem: removeTodoItem_removeTodoItem | null;\n}\n\nexport interface removeTodoItemVariables {\n  id: string;\n}\n\nexport const removeTodoItem:ExtMutation<removeTodoItem,removeTodoItemVariables> = graphql`\n    mutation removeTodoItem($id: ID!) {\n  removeTodoItem(id: $id) @client {\n    id\n  }\n}\n    \n`","import {graphql,ExtMutation,} from '../util'\n    /* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: clearCompletedItems\n// ====================================================\n\nexport interface clearCompletedItems {\n  clearCompletedItems: boolean | null;\n}\n\nexport interface clearCompletedItemsVariables {};\n\nexport const clearCompletedItems:ExtMutation<clearCompletedItems,clearCompletedItemsVariables> = graphql`\n    mutation clearCompletedItems {\n  clearCompletedItems @client\n}\n    \n`","\n// ~ auto generated\nimport * as op from './op'\nimport {ExtQuery,ExtMutation,ExtSubscription} from './util'\nimport {\n    useQuery as useQueryOrig,\n    useMutation as useMutationOrig,\n    useSubscription as useSubscriptionOrig,\n    useLazyQuery as useLazyQueryOrig,\n    MutationHookOptions,\n    QueryHookOptions,\n    SubscriptionHookOptions,\n    LazyQueryHookOptions,\n} from '@apollo/client'\n\nexport function useQuery<A,B> (x:ExtQuery<A,B>,opt?:QueryHookOptions<A,B>) {\n    return useQueryOrig<A,B>(x,opt);\n}\nexport function useLazyQuery<A,B> (x:ExtQuery<A,B>,opt?:LazyQueryHookOptions<A,B>) {\n    return useLazyQueryOrig<A,B>(x,opt);\n}\n\nexport function useMutation<A,B> (x:ExtMutation<A,B>,opt?:MutationHookOptions<A,B>) {\n    return useMutationOrig<A,B>(x,opt);\n}\n\nexport function useSubscription<A,B> (x:ExtSubscription<A,B>,opt?:SubscriptionHookOptions<A,B>) {\n    return useSubscriptionOrig<A,B>(x,opt);\n}\nexport {graphql as gql} from './util'\n\nexport default op\n\n","import ql,{gql} from './generated/ql'\nimport {TodoItemStatus} from './generated/util'\nimport produce from \"immer\"\n\nconst fragment = gql`\n        fragment todo on TodoItem {\n            content\n            status\n            isLoading\n        }\n`\n\nlet idx = 0;\nexport const resolvers = {\n\n    Mutation:{\n        addTodoItem:(_,{content},{cache})=>{\n            const prev = cache.readQuery({ query:ql.showTodos })\n            const newItem = ({__typename: 'TodoItem',id:idx++, content, status:TodoItemStatus.active, isLoading:false})\n            const data = {\n                todos:[newItem, ...prev.todos]\n            }\n            cache.writeData({ data });\n            return newItem;\n        },\n\n        updateTodoItem:(_,{id,content=null,status=null}, {cache,getCacheKey})=>{\n            //get item\n            const cacheId = getCacheKey({ __typename: 'TodoItem', id: id });\n            const todo = cache.readFragment({ fragment, id:cacheId });\n            const nextTodo = produce(todo, x=>{\n                if (content) x.content = content;\n                if (status) x.status = status;\n            })\n            cache.writeData({data:nextTodo, id:cacheId});\n            return true;\n        },\n\n        removeTodoItem:(_,{id},{cache})=>{\n            const prev = cache.readQuery({ query:ql.showTodos })\n            const todos = prev.todos.filter(e=>e.id!=id);\n            cache.writeData({ data:{todos} })\n            return prev.todos.filter(e=>e.id==id)[0];\n        },\n\n        clearCompletedItems:(_,__,{cache})=>{\n            const prev = cache.readQuery({ query:ql.showTodos })\n            let completedItems = []\n            const todos = prev.todos.filter(e=>{\n                const completed = (e.status == TodoItemStatus.completed);\n                if (completed) completedItems.push(e);\n                return !completed;\n            });\n            cache.writeData({ data:{todos} })\n            return completedItems;\n        },\n    },\n\n    TodoItem:{\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nexport const FlexR = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n`;\n\nexport const FlexC = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nexport const ItemList = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\tpadding: 5px 20px;\n\tborder-bottom: 1px solid grey;\n`;\n\nexport const E = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n`;\n\nexport const List: React.FC<{\n\titems: any[];\n\tItemComponent;\n\tkeyExtract;\n\tdirection?: 'vertical' | 'horizontal';\n}> = ({ items, ItemComponent, keyExtract, direction = 'vertical' }) => {\n\tconst Content = (\n\t\t<>\n\t\t\t{items.map(item => (\n\t\t\t\t<ItemComponent key={keyExtract(item)} {...item} />\n\t\t\t))}\n\t\t</>\n\t);\n\treturn direction == 'vertical' ? (\n\t\t<FlexC>{Content}</FlexC>\n\t) : (\n\t\t<FlexR>{Content}</FlexR>\n\t);\n};\n\nexport const Example = () => <div>OK</div>;\n","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\n// -------------------------\n// Styled Components\n// -------------------------\n\nconst InputBar = styled.input`\n\tflex: 1;\n\tpadding: 5px 5px;\n\tborder: 1px solid grey;\n\tborder-radius: 3px;\n`;\n\nconst Form = styled.form`\n\tdisplay: flex;\n\tflex-direction: row;\n\tposition: relative;\n\tfont-size: 17px;\n`;\n\nconst IconSend = styled(FontAwesomeIcon).attrs(() => ({ icon: faPaperPlane }))<{\n\tdisabled: boolean;\n}>`\n\tposition: absolute;\n\tright: 5px;\n\ttop: 30%;\n\tcolor: grey;\n\t${({ disabled }) => {\n\t\tif (!disabled)\n\t\t\treturn `\n\t\t\tcolor: black;\n\t\t\t&:hover {\n\t\t\t\tcolor: blue;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t`;\n\t}}\n`;\n\n// -------------------------\n// InputAddItem\n// -------------------------\n\nexport const InputAddItem = ({\n\tonSubmit,\n\tplaceholder = 'enter message...',\n\tdefaultValue = '',\n\t...props\n}) => {\n\tconst inputRef = useRef(null);\n\tconst [value, setValue] = useState(defaultValue);\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={e => {\n\t\t\t\te.preventDefault();\n\t\t\t\tif (value.length > 1) {\n\t\t\t\t\tonSubmit(value);\n\t\t\t\t\tsetValue('');\n\t\t\t\t}\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t<InputBar\n\t\t\t\tref={inputRef}\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t/>\n\t\t\t<IconSend\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (value.length) {\n\t\t\t\t\t\tonSubmit(value);\n\t\t\t\t\t\tsetValue('');\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tdisabled={value.length == 0}\n\t\t\t/>\n\t\t</Form>\n\t);\n};\n","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\n// - Components\nimport { FlexR } from './util';\n\n// -------------------------\n// Styled Components\n// -------------------------\n\nconst Wrap = styled(FlexR)`\n\tjustify-content: space-between;\n\tpadding: 0px 20px;\n`;\n\nconst Button = styled.button`\n\tborder: 1px solid black;\n\tbackground-color: white;\n`;\n\nconst SelectedButton = styled(Button)`\n\tbackground-color: grey;\n`;\n\nconst SegmentButton = ({ choices, selectedChoice, onSelectChoice }) => (\n\t<div>\n\t\t{choices.map(choice =>\n\t\t\tchoice == selectedChoice ? (\n\t\t\t\t<SelectedButton key={choice}>{choice}</SelectedButton>\n\t\t\t) : (\n\t\t\t\t<Button key={choice} onClick={() => onSelectChoice(choice)}>\n\t\t\t\t\t{choice}\n\t\t\t\t</Button>\n\t\t\t)\n\t\t)}\n\t</div>\n);\n\n// -------------------------\n// FilterBar\n// -------------------------\n\nexport const FilterBar = ({\n\tchoices,\n\tselectedChoice,\n\tonSelectChoice,\n\tonClearCompleted,\n}) => (\n\t<Wrap>\n\t\t<SegmentButton\n\t\t\tchoices={choices}\n\t\t\tselectedChoice={selectedChoice}\n\t\t\tonSelectChoice={onSelectChoice}\n\t\t/>\n\t\t<Button onClick={onClearCompleted}>Clear Completed</Button>\n\t</Wrap>\n);\n","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\nconst InputBar = styled.input<{ completed: boolean }>`\n\tflex: 1;\n\tpadding: 5px 5px;\n\tborder-radius: 3px;\n\tfont-size: 17px;\n\tborder: 0;\n\t${({ completed }) =>\n\t\tcompleted && 'font-style: italic; text-decoration: line-through;'}\n`;\n\nconst Form = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tposition: relative;\n\tborder: 1px solid grey;\n`;\n\nconst Icon = styled(FontAwesomeIcon)<{ color: any; icon: any }>`\n\tposition: absolute;\n\tright: 5px;\n\ttop: 30%;\n\t${({ color }) => `\n\tcolor: ${color.primary};\n\t&:hover {\n\t\tcolor: ${color.hover};\n\t\tcursor: pointer;\n\t}\n\t`}\n`;\n\nconst _Cont = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n`;\n\nconst Check = ({ checked, onToggle }) => (\n\t<_Cont>\n\t\t<input type=\"checkbox\" checked={checked} onChange={onToggle} />\n\t\t<span></span>\n\t</_Cont>\n);\n\nconst IconSync = props => (\n\t<Icon\n\t\ticon={faSpinner}\n\t\tcolor={{ primary: 'black', hover: 'grey' }}\n\t\t{...props}\n\t/>\n);\nconst IconRemove = props => (\n\t<Icon icon={faTimes} color={{ primary: 'black', hover: 'grey' }} {...props} />\n);\n\n//--------------------------\n//--------------------------\n// TodoItem\n//--------------------------\n//--------------------------\n\nexport const TodoItem = ({\n\tvalue,\n\tcompleted,\n\tisSync = false,\n\tonChangeText,\n\tonToggle,\n\tonRemove,\n\t...props\n}) => {\n\tconst [v, setValue] = useState(value);\n\tconst inputRef = useRef(null);\n\treturn (\n\t\t<Form>\n\t\t\t<Check checked={completed} onToggle={onToggle} />\n\t\t\t<InputBar\n\t\t\t\tvalue={v}\n\t\t\t\tref={inputRef}\n\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\tonBlur={() => v != value && onChangeText(v)}\n\t\t\t\tonKeyDown={(e: any) => {\n\t\t\t\t\tif (e.key == 'Escape') e.target.blur();\n\t\t\t\t\telse if (e.key == 'Enter') e.target.blur();\n\t\t\t\t}}\n\t\t\t\tcompleted={completed}\n\t\t\t/>\n\t\t\t{isSync ? <IconSync /> : <IconRemove onClick={onRemove} />}\n\t\t</Form>\n\t);\n};","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faTimes } from '@fortawesome/free-solid-svg-icons';\n// - Components\nimport * as S from './util';\nimport {TodoItem} from './TodoItem';\n\n// -------------------------\n// TodoList\n// -------------------------\n\nconst TodoListLoading = () => <div>Loading... </div>;\nconst TodoListEmpty = () => <div>no items... </div>;\n\nexport const TodoList = ({\n\tonChangeItemContent,\n\tonChangeItemStatus,\n\tonRemoveItem,\n\tisLoading,\n\ttodos,\n}) => {\n\tif (isLoading) return <TodoListLoading />;\n\tif (todos.length == 0) return <TodoListEmpty />;\n\treturn (\n\t\t<S.FlexC>\n\t\t\t{todos.map(({ content, status, isLoading, id }) => (\n\t\t\t\t<TodoItem\n\t\t\t\t\tkey={id}\n\t\t\t\t\tvalue={content}\n\t\t\t\t\tcompleted={status == 'completed'}\n\t\t\t\t\tisSync={isLoading}\n\t\t\t\t\tonChangeText={v => onChangeItemContent(id, v)}\n\t\t\t\t\tonToggle={() =>\n\t\t\t\t\t\tonChangeItemStatus(id, status == 'active' ? 'completed' : 'active')\n\t\t\t\t\t}\n\t\t\t\t\tonRemove={() => onRemoveItem(id)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</S.FlexC>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'\n// - Components\nimport { FlexC } from '../components/util';\nimport {TodoList,InputAddItem,FilterBar} from '../components';\nimport ql,{gql,useQuery,useMutation} from '../generated/ql';\n\ngql`\nquery showTodos {\n\tvisibilityFilter @client\n\ttodos @client {\n\t\tid\n\t\tstatus\n\t\tcontent\n\t\tisLoading\n\t}\n}\n\nmutation addTodoItem($content:String!) {\n\taddTodoItem(content:$content) @client { id }\n}\n\nmutation updateTodoItem($id:ID!, $content:String, $status:TodoItemStatus){\n\tupdateTodoItem(id:$id, content:$content, status:$status) @client\n}\n\nmutation removeTodoItem($id:ID!){\n\tremoveTodoItem(id:$id) @client {\n\t\tid\n\t}\n}\n\nquery forFilterBar {\n\tvisibilityFilter @client\n}\n\nmutation clearCompletedItems {\n\tclearCompletedItems @client\n}\n`\n\n\n// -------------------------\n// Styled Components\n// -------------------------\n\nconst Wrap = styled(FlexC)`\n\tflex: column;\n\talign-items: center;\n\tjustify-content: center;\n\tpadding: 20px;\n`;\n\nconst Header = styled(FlexC)`\n\tfont-size: 30px;\n\tfont-weight: bold;\n`;\n\nconst Card = styled(FlexC)`\n\tflex: 1;\n\twidth: 100%;\n`;\n\nconst CardItem = styled(FlexC)`\n\tpadding: 20px;\n`;\n\nconst Cont = styled(FlexC)`\n\tflex: 1;\n\twidth: 100%;\n\tborder: 1px solid black;\n\talign-items: center;\n`;\n\n// -------------------------\n// Reduxed components\n// -------------------------\n\nconst QxInputAddItem = () => {\n\tconst [addTodoItem] = useMutation(ql.addTodoItem);\n\n\treturn <InputAddItem onSubmit={content => addTodoItem({variables:{content}})} />;\n};\n\nconst QxFilterBar = () => {\n\tconst {data,updateQuery} = useQuery(ql.forFilterBar);\n\tconst [clearCompletedItems] = useMutation(ql.clearCompletedItems);\n\treturn (\n\t\t<FilterBar\n\t\t\tchoices={['all','active','completed']}\n\t\t\tselectedChoice={data.visibilityFilter}\n\t\t\tonSelectChoice={choice => updateQuery(d=>({visibilityFilter:choice}))}\n\t\t    onClearCompleted={() => clearCompletedItems()}\n\t\t/>\n\t);\n};\n\nconst QxTodoList = () => {\n\tconst {data} = useQuery(ql.showTodos);\n\tconst [updateTodoItem] = useMutation(ql.updateTodoItem);\n\tconst [removeTodoItem] = useMutation(ql.removeTodoItem);\n\treturn (\n\t\t<TodoList\n            todos={\n\t\t\t\tdata.visibilityFilter == 'all'\n\t\t\t\t\t? data.todos\n\t\t\t\t\t: data.todos.filter(x => (x.status as string) == (data.visibilityFilter as string))\n\t\t\t}\n\t\t\tisLoading={false}\n\t\t\tonChangeItemContent={ (id, content) => updateTodoItem({variables:{id,content}}) }\n\t\t\tonChangeItemStatus={(id, status) => updateTodoItem({variables:{id,status}}) }\n\t\t\tonRemoveItem={id => removeTodoItem({variables:{id}})}\n\t\t/>\n\t);\n};\n\n// -------------------------\n// Page\n// -------------------------\n\nexport default () => (\n\t<Wrap>\n\t\t<Header>\n\t\t\tTodos (with apollo local state)\n\t\t\t<QxInputAddItem />\n\t\t</Header>\n\t\t<Cont>\n\t\t\t<Card>\n\t\t\t\t<CardItem>\n\t\t\t\t\t<QxTodoList />\n\t\t\t\t</CardItem>\n\t\t\t\t<CardItem>\n\t\t\t\t\t<QxFilterBar />\n\t\t\t\t</CardItem>\n\t\t\t</Card>\n\t\t</Cont>\n\t</Wrap>\n);","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// - Apollo\nimport {  ApolloClient,  ApolloProvider,  InMemoryCache, } from \"@apollo/client\"\nimport {resolvers} from \"./resolvers\";\nimport {VisibilityFilter} from './generated/util'\n// - Pages\nimport RootPage from './pages/Root';\n\nconst cache = new InMemoryCache();\n\ncache.writeData({data:{\n  visibilityFilter:VisibilityFilter.all,\n  todos:[],\n}})\n\nconst client = new ApolloClient({\n  cache: cache,\n  resolvers,\n})\n\nconst App = () => <RootPage />;\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n\t\t<App />\n  </ApolloProvider>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}